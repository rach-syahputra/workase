// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(uuid())
  email         String       @unique
  password      String?
  authProvider  AuthProvider @map("auth_provider")
  authId        String?      @map("auth_id")
  isVerified    Boolean      @map("is_verified")
  location      String
  profilePhoto  String       @map("profile_photo")
  placeOfBirth  String       @map("place_of_birth")
  dateOfBirth   DateTime     @map("date_of_birth")
  gender        Gender
  lastEducation String       @map("last_education")
  address       String
  isDeleted     Boolean      @default(false) @map("is_deleted")

  AppliedJob          AppliedJob[]
  SavedJob            SavedJob[]
  Subscription        Subscription[]
  UserAssesment       UserAssesment[]
  Certificate         Certificate[]
  PreselectionAttempt PreselectionAttempt[]

  @@map("users")
}

model Developer {
  id        String  @id @default(uuid())
  email     String  @unique
  name      String
  password  String
  image     String?
  isDeleted Boolean @default(false) @map("is_deleted")

  SubscriptionPayment SubscriptionPayment[]

  @@map("developers")
}

model Company {
  id          String  @id @default(uuid())
  name        String
  email       String  @unique
  password    String
  phoneNumber String  @map("phone_number")
  logoUrl     String  @map("logo_url")
  description String
  category    String
  location    String
  isDeleted   Boolean @default(false) @map("is_deleted")

  Job           Job[]
  CompanyReview CompanyReview[]

  @@map("companies")
}

model Job {
  id          String      @id @default(uuid())
  title       String
  category    JobCategory
  description String
  companyId   String      @map("company_id")
  isDeleted   Boolean     @default(false) @map("is_deleted")
  createdAt   DateTime    @map("created_at")

  company Company @relation(fields: [companyId], references: [id], onUpdate: Cascade)

  AppliedJob       AppliedJob[]
  SavedJob         SavedJob[]
  PreselectionTest PreselectionTest[]

  @@map("jobs")
}

model AppliedJob {
  jobId              String           @map("job_id")
  userId             String           @map("user_id")
  cvUrl              String           @map("cv_url")
  salaryEstimate     Int              @map("salary_estimate")
  status             AppliedJobStatus
  appliedAt          DateTime         @map("applied_at")
  hrReview           String?          @map("hr_review")
  preselectionPassed Boolean          @map("preselection_passed")
  interviewSchedule  DateTime?        @map("interview_schedule")

  job  Job  @relation(fields: [jobId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@id([jobId, userId])
  @@map("applied_jobs")
}

model SavedJob {
  jobId  String @map("job_id")
  userId String @map("user_id")

  job  Job  @relation(fields: [jobId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@id([jobId, userId])
  @@map("saved_jobs")
}

model Subscription {
  id        String               @id @default(uuid())
  userId    String               @map("user_id")
  category  SubscriptionCategory
  startedAt DateTime             @map("started_at")
  expiresAt DateTime             @map("expires_at")
  isDeleted Boolean              @default(false) @map("is_deleted")

  user                User                  @relation(fields: [userId], references: [id], onUpdate: Cascade)
  SubscriptionPayment SubscriptionPayment[]

  @@map("subscriptions")
}

model SubscriptionPayment {
  id             String        @id @default(uuid())
  subscriptionId String        @map("subscription_id")
  paymentStatus  PaymentStatus @map("payment_status")
  paymentProof   String        @map("payment_proof")
  approvedBy     String        @map("approved_by")
  createdAt      DateTime      @map("created_at")
  isDeleted      Boolean       @default(false) @map("is_deleted")

  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  developer    Developer    @relation(fields: [approvedBy], references: [id], onUpdate: Cascade)

  @@map("subscription_payments")
}

model CompanyReview {
  id             String   @id @default(uuid())
  companyId      String   @map("company_id")
  title          String
  jobTitle       String   @map("job_title")
  salaryEstimate Int      @map("salary_estimate")
  rating         Int
  content        String
  createdAt      DateTime @map("created_at")
  isDeleted      Boolean  @default(false) @map("is_deleted")

  company Company @relation(fields: [companyId], references: [id], onUpdate: Cascade)

  @@map("company_reviews")
}

model Skill {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @map("created_at")
  updatedAt DateTime @map("updated_at")
  isDeleted Boolean  @default(false) @map("is_deleted")

  Assesment   Assesment[]
  Certificate Certificate[]

  @@map("skills")
}

model Assesment {
  id        String   @id @default(uuid())
  skillId   String   @map("skill_id")
  createdAt DateTime @map("created_at")
  updatedAt DateTime @map("updated_at")
  isDeleted Boolean  @default(false) @map("is_deleted")

  skill             Skill               @relation(fields: [skillId], references: [id], onUpdate: Cascade)
  AssesmentQuestion AssesmentQuestion[]
  UserAssesment     UserAssesment[]

  @@map("assesments")
}

model AssesmentQuestion {
  id          String   @id @default(uuid())
  assesmentId String   @map("assesment_id")
  question    String
  image       String?
  createdAt   DateTime @map("created_at")
  updatedAt   DateTime @map("updated_at")
  isDeleted   Boolean  @default(false) @map("is_deleted")

  assesment      Assesment        @relation(fields: [assesmentId], references: [id], onUpdate: Cascade)
  QuestionOption QuestionOption[]

  @@map("assesment_questions")
}

model QuestionOption {
  id                  String   @id @default(uuid())
  assesmentQuestionId String   @map("assesment_question_id")
  option              String
  isCorrect           Boolean  @map("is_correct")
  createdAt           DateTime @map("created_at")
  isDeleted           Boolean  @default(false) @map("is_deleted")

  assesmentQuestion AssesmentQuestion @relation(fields: [assesmentQuestionId], references: [id], onUpdate: Cascade)

  @@map("question_options")
}

model UserAssesment {
  id          String              @id @default(uuid())
  userId      String              @map("user_id")
  assesmentId String              @map("assesment_id")
  status      UserAssesmentStatus
  score       Int
  createdAt   DateTime            @map("created_at")
  isDeleted   Boolean             @default(false) @map("is_deleted")

  user      User      @relation(fields: [userId], references: [id], onUpdate: Cascade)
  assesment Assesment @relation(fields: [assesmentId], references: [id], onUpdate: Cascade)

  @@map("user_assesments")
}

model Certificate {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  skillId   String   @map("skill_id")
  url       String
  qrCode    String   @unique @map("qr_code")
  createdAt DateTime @map("created_at")
  isDeleted Boolean  @default(false) @map("is_deleted")

  user  User  @relation(fields: [userId], references: [id], onUpdate: Cascade)
  skill Skill @relation(fields: [skillId], references: [id], onUpdate: Cascade)

  @@map("certificates")
}

model PreselectionTest {
  id          String   @id @default(uuid())
  jobId       String   @map("job_id")
  title       String
  description String
  createdAt   DateTime @map("created_at")
  updatedAt   DateTime @map("updated_at")
  isDeleted   Boolean  @default(false) @map("is_deleted")

  job                  Job                    @relation(fields: [jobId], references: [id], onUpdate: Cascade)
  PreselectionQuestion PreselectionQuestion[]
  PreselectionAttempt  PreselectionAttempt[]

  @@map("preselection_tests")
}

model PreselectionQuestion {
  id                   String                 @id @default(uuid())
  testId               String                 @map("test_id")
  questionContent      String                 @map("question_content")
  createdAt            DateTime               @map("created_at")
  updatedAt            DateTime               @map("updated_at")
  isDeleted            Boolean                @default(false) @map("is_deleted")
  test                 PreselectionTest       @relation(fields: [testId], references: [id], onUpdate: Cascade)
  PreselectionResponse PreselectionResponse[]
  PreselectionAnswer   PreselectionAnswer[]

  @@map("preselection_questions")
}

model PreselectionAnswer {
  id            String   @id @default(uuid())
  questionId    String   @map("question_id")
  answerContent String   @map("answer_content")
  isCorrect     Boolean  @map("is_correct")
  createdAt     DateTime @map("created_at")
  isDeleted     Boolean  @default(false) @map("is_deleted")

  question             PreselectionQuestion   @relation(fields: [questionId], references: [id], onUpdate: Cascade)
  PreselectionResponse PreselectionResponse[]

  @@map("preselection_answers")
}

model PreselectionAttempt {
  id        String                    @id @default(uuid())
  userId    String                    @map("user_id")
  testId    String                    @map("test_id")
  score     Int
  status    PreselectionAttemptStatus
  createdAt DateTime                  @map("created_at")
  isDeleted Boolean                   @default(false) @map("is_deleted")

  user                 User                   @relation(fields: [userId], references: [id], onUpdate: Cascade)
  test                 PreselectionTest       @relation(fields: [testId], references: [id], onUpdate: Cascade)
  PreselectionResponse PreselectionResponse[]

  @@map("preselection_attempts")
}

model PreselectionResponse {
  id               String @id @default(uuid())
  attemptId        String @map("attempt_id")
  questionId       String @map("question_id")
  selectedAnswerId String @map("selected_answer_id")

  attempt  PreselectionAttempt  @relation(fields: [attemptId], references: [id], onUpdate: Cascade)
  question PreselectionQuestion @relation(fields: [questionId], references: [id], onUpdate: Cascade)
  answer   PreselectionAnswer   @relation(fields: [selectedAnswerId], references: [id], onUpdate: Cascade)

  @@map("preselection_responses")
}

enum AuthProvider {
  EMAIL
  GOOGLE
  FACEBOOK
  TWITTER
}

enum Gender {
  MALE
  FEMALE
}

enum JobCategory {
  FULL_TIME
  FREELANCE
  PART_TIME
  CONTRACT
}

enum AppliedJobStatus {
  WAITING
  REVIEWED
  ACCEPTED
  REJECTED
}

enum SubscriptionCategory {
  STANDARD
  PROFESSIONAL
}

enum PaymentStatus {
  PENDING
  REJECTED
  CONFIRMED
}

enum UserAssesmentStatus {
  PASSED
  FAILED
}

enum PreselectionAttemptStatus {
  PASSED
  FAILED
}
